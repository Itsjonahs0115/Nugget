-- starting gui
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Ping Detection
-- Ping Detection using ServerStatsItem
local Stats = game:GetService("Stats")
local ping = 0

task.spawn(function()
    local pingStat = Stats.Network.ServerStatsItem and Stats.Network.ServerStatsItem:FindFirstChild("Data Ping")
    while true do
        if pingStat then
            ping = math.floor(pingStat:GetValue())
        else
            ping = 0
        end
        task.wait(0.1)
    end
end)

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false -- Forces AddToggle to AddCheckbox
Library.ShowToggleFrameInKeybinds = true -- Make toggle keybinds work inside the keybinds UI (aka adds a toggle to the UI). Good for mobile users (Default value = true)

local Window = Library:CreateWindow({
	-- Set Center to true if you want the menu to appear in the center
	-- Set AutoShow to true if you want the menu to appear when it is created
	-- Set Resizable to true if you want to have in-game resizable Window
	-- Set MobileButtonsSide to "Left" or "Right" if you want the ui toggle & lock buttons to be on the left or right side of the window
	-- Set ShowCustomCursor to false if you don't want to use the Linoria cursor
	-- NotifySide = Changes the side of the notifications (Left, Right) (Default value = Left)
	-- Position and Size are also valid options here
	-- but you do not need to define them unless you are changing them :)

	Title = "Comet Hub",
	Footer = "version: Rollback hub",
	Icon = 120882999117525,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local Tabs = {
	-- Creates a new tab titled Main
	Main = Window:AddTab("Main", "user"),
	ingame = Window:AddTab("In game", "user"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox("Misc")



local animation = LeftGroupBox:AddButton({
	Text = "animation",
	Func = function()
	local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Create and load the animation
local animation = Instance.new("Animation")
animation.AnimationId = "rbxassetid://13857940523"

-- Load and play the animation
local animator = humanoid:FindFirstChildOfClass("Animator")
if not animator then
    animator = Instance.new("Animator")
    animator.Parent = humanoid
end

local animationTrack = animator:LoadAnimation(animation)
animationTrack:Play()

	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local Rollback = LeftGroupBox:AddButton({
	Text = "Rollback",
	Func = function()
		local player = game.Players.LocalPlayer
	local yen = player.Character.RankSystem.Yen
	local args = {
		[1] = "Right",
		[2] = "F\255"
	}
	game:GetService("ReplicatedStorage"):WaitForChild("rerolls"):WaitForChild("KeybindChange"):FireServer(unpack(args))
	task.wait(0.2)

	loadstring(game:HttpGet("https://raw.githubusercontent.com/comethubasd/comet/refs/heads/main/best%20server"))()
	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local Dupe = LeftGroupBox:AddButton({
	Text = "Dupe second slot",
	Func = function()
		local plr = game.Players.LocalPlayer
	plr.Character.Humanoid.Health = 0

	task.wait(10)

	game.ReplicatedStorage.rerolls.Slots:FireServer("1")

	task.wait(2)

	loadstring(game:HttpGet("https://raw.githubusercontent.com/comethubasd/comet/refs/heads/main/best%20server"))()
	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local Redeem = LeftGroupBox:AddButton({
	Text = "Redeem codes",
	Func = function()
		local code = game.ReplicatedStorage.SendCode
    code:FireServer("120KFAVOURITE")
    code:FireServer("125MILVISITS")
    code:FireServer("DRAGONHEADER")
    code:FireServer("150KMEMBERS")
    code:FireServer("MEDALXLOCKED")
    code:FireServer("10KSUBS")
    code:FireServer("SEASON5WINNER")
    code:FireServer("CODE")
	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local RedeemTask = LeftGroupBox:AddButton({
	Text = "Swap third slot",
	Func = function()
		
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local Slots = ReplicatedStorage.rerolls.Slots -- RemoteEvent 

	Slots:FireServer(
	    "2"
	)

	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local RedeemTask = LeftGroupBox:AddButton({
	Text = "Complete task",
	Func = function()
		local ReplicatedStorage = game:GetService("ReplicatedStorage")
		local RedeemAward = ReplicatedStorage.Tasks.RedeemAward
		for i = -12, 12 do
    		RedeemAward:FireServer(i)
    		task.wait(0.1) -- Optional delay to avoid spamming too fast
		end
	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local emotes = LeftGroupBox:AddButton({
	Text = "get all emotes",
	Func = function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local ExclusiveAdd = ReplicatedStorage.Lockedtines.ExclusiveAdd -- RemoteEvent 

	ExclusiveAdd:FireServer(
    "LockedtinesEmotepack"
	)
	ExclusiveAdd:FireServer(
    	"IsagiPack"
	)
	ExclusiveAdd:FireServer(
    "BarouPack"
	)
	ExclusiveAdd:FireServer(
    "ReoPack"
	)

	
	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local RightGroupbox = Tabs.Main:AddRightGroupbox("Auto Roll")

local getWeaponSelection = "na"
local getTraitSelection = "na"


RightGroupbox:AddDropdown("Weapon", {
	Values = { "Accelerate", "Acrobatic", "AceEater", "Chigiri", "CopyCat", "DirectShot", "Emperor", "Formless",
    "GodSpeed", "IronHead", "King", "Kunigami", "Leader", "LongLegs", "Monster", "Nagi", "Neurotic",
    "Planetary", "Repel", "Riptide", "Rough", "Serpent", "Shadow", "Snatch", "SwordScrew", "Updraft",
    "Voracious", "WatchTower", "Web" },
	Default = 0, -- number index of the value / string
	Multi = false, -- true / false, allows multiple choices to be selected

	Text = "Search Weapon",
	Tooltip = "This is a tooltip", -- Information shown when you hover over the dropdown
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the dropdown while it's disabled

	Searchable = true, -- true / false, makes the dropdown searchable (great for a long list of values)

	Callback = function(Value)
        getWeaponSelection = Value
		print("Weapon got changed. New value:", getWeaponSelection)
	end,

	Disabled = false, -- Will disable the dropdown (true / false)
	Visible = true, -- Will make the dropdown invisible (true / false)
})

RightGroupbox:AddToggle("weapon roll", {
	Text = "Auto roll weapon",
	Tooltip = "Automatically rerolls until desired weapon is found",
	DisabledTooltip = "This toggle is disabled",

	Default = false,
	Disabled = false,
	Visible = true,
	Risky = false,

	Callback = function(Value)
	if Value then
		task.spawn(function()
			while Toggles["weapon roll"].Value do
				local weapontofind = getWeaponSelection
				if not weapontofind or weapontofind == "na" then break end

				local foundWeapon = player.Backpack:FindFirstChildWhichIsA("ValueBase")
				local hasWeapon = foundWeapon and foundWeapon.Name == weapontofind

				if hasWeapon then 
				print("weapon found")
				loadstring(game:HttpGet("https://raw.githubusercontent.com/comethubasd/comet/refs/heads/main/best%20server"))()
				break
				end

				if player.Character.RankSystem.Yen.Value < tonumber(Options.minyen.Value) then
					-- Run rollback teleport
					local args = {
						[1] = "Right",
						[2] = "F\255"
					}
					ReplicatedStorage:WaitForChild("rerolls"):WaitForChild("KeybindChange"):FireServer(unpack(args))
					task.wait(0.2)

					loadstring(game:HttpGet("https://raw.githubusercontent.com/comethubasd/comet/refs/heads/main/best%20server"))()
					break
				end

				ReplicatedStorage.rerolls.specreroll:FireServer(2)
				task.wait(ping / 1000)
			end
		end)
	end
end,
})

RightGroupbox:AddDropdown("trait", {
	Values = { "Ambidextrous", "Athlete", "Bunnys", "Calculate", "Clamps", "Claw", "Consistent", "Destruction", "Diver", "Dragon", "Egoist", "Fortune", "GoldenZone",
    "LongStrides", "Metavision", "NoLook", "Powerhouse", "Puppeteer", "QuickDraw", "Revolver", "Ripper",
    "Surf", "Tank", "Tireless", "TwinGuns", "Unbreakable" },
	Default = 0, -- number index of the value / string
	Multi = false, -- true / false, allows multiple choices to be selected

	Text = "Search trait",
	Tooltip = "This is a tooltip", -- Information shown when you hover over the dropdown
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the dropdown while it's disabled

	Searchable = true, -- true / false, makes the dropdown searchable (great for a long list of values)

	Callback = function(Value)
        getTraitSelection = Value
		print("Trait got changed. New value:", getTraitSelection)
	end,

	Disabled = false, -- Will disable the dropdown (true / false)
	Visible = true, -- Will make the dropdown invisible (true / false)
})


RightGroupbox:AddToggle("trait roll", {
	Text = "Auto roll Trait",
	Tooltip = "This is a tooltip",
	DisabledTooltip = "I am disabled!",
	Default = false,
	Disabled = false,
	Visible = true,
	Risky = false,

	Callback = function(Value)
	if Value then
		task.spawn(function()
			local traittofind = getTraitSelection
			if not traittofind or traittofind == "na" then return end

			while Toggles["trait roll"].Value do
				local traitFolder = player.Backpack:FindFirstChild("Trait")
				local foundTrait = traitFolder and traitFolder:FindFirstChildWhichIsA("ValueBase")
				local hasTrait = foundTrait and foundTrait.Name == traittofind

				if hasTrait then 
				print("Trait found")
				loadstring(game:HttpGet("https://raw.githubusercontent.com/comethubasd/comet/refs/heads/main/best%20server"))()
				break
				end

				if player.Character.RankSystem.Yen.Value < tonumber(Options.minyen.Value) then
					-- Run rollback teleport
					local args = {
						[1] = "Right",
						[2] = "F\255"
					}
					ReplicatedStorage:WaitForChild("rerolls"):WaitForChild("KeybindChange"):FireServer(unpack(args))
					task.wait(0.2)

					
					loadstring(game:HttpGet("https://raw.githubusercontent.com/comethubasd/comet/refs/heads/main/best%20server"))()
					break
				end

				ReplicatedStorage.rerolls.traitreroll:FireServer(2)
				task.wait(ping / 1000)
			end
		end)
	end
end,
})

local minimYen = 3000

RightGroupbox:AddInput("minyen", {
	Default = 3000,
	Numeric = true, -- true / false, only allows numbers
	Finished = false, -- true / false, only calls callback when you press enter
	ClearTextOnFocus = true, -- true / false, if false the text will not clear when textbox focused

	Text = "Minimum yen",
	Tooltip = "This is a tooltip", -- Information shown when you hover over the textbox

	Placeholder = "...", -- placeholder text when the box is empty
	-- MaxLength is also an option which is the max length of the text

	Callback = function(Value)
		minimYen = Value
	end,
})



local LeftGroupbox2 = Tabs.Main:AddLeftGroupbox("Current stuff")
local yen = player.Character.RankSystem.Yen
local flow1 = player.Character.AuraColour.Buff.value
local flow2 = player.Character.AuraColour.Buff:GetAttribute("BuffValue")

pingLabel = LeftGroupbox2:AddLabel("Current Ping: ...")
LeftGroupbox2:AddLabel("note the lower your")
LeftGroupbox2:AddLabel("ping the faster you spin")
weaponLabel = LeftGroupbox2:AddLabel("Current Weapon: ...")
traitLabel = LeftGroupbox2:AddLabel("Current Trait: ...")
yenLabel = LeftGroupbox2:AddLabel("Yen: ...")
flow1Label = LeftGroupbox2:AddLabel("Flow type: ...")
flow2Label = LeftGroupbox2:AddLabel("Flow buff: ...")


-- Update Labels Loop
task.spawn(function()
    while true do
        -- Update Ping
        pingLabel:SetText("Current Ping: " .. ping .. "ms")
        
        -- Update Ability
        local currentAbility = "N/A"
        for _, val in ipairs(player.Backpack:GetChildren()) do
            if val:IsA("NumberValue") then
                currentAbility = val.Name
                break
            end
        end
        weaponLabel:SetText("Current Weapon: " .. currentAbility)

        -- Update Trait
        local currentTrait = "N/A"
        local traitFolder = player.Backpack:FindFirstChild("Trait")
        if traitFolder then
            for _, trait in ipairs(traitFolder:GetChildren()) do
                if trait:IsA("ValueBase") then
                    currentTrait = trait.Name
                    break
                end
            end
        end
        traitLabel:SetText("Current Trait: " .. currentTrait)

		yen = player.Character.RankSystem.Yen.value
		yenLabel:SetText("Yen: " .. yen)

		flow1 = player.Character.AuraColour.Buff.value
		flow2 = player.Character.AuraColour.Buff:GetAttribute("BuffValue") * 10
		flow1Label:SetText("Flow type: " .. flow1)
		flow2Label:SetText("Flow buff: " .. flow2)
        task.wait(0.02)
    end
end)


local RightGroupbox2 = Tabs.Main:AddRightGroupbox("Flow")

local buff = 1
local flowtype = "speed"

RightGroupbox2:AddDropdown("type", {
	Values = { "speed", "power", "hitbox", "cooldown", "stamina" },
	Default = 0, -- number index of the value / string
	Multi = false, -- true / false, allows multiple choices to be selected

	Text = "Search flow type",
	Tooltip = "This is a tooltip", -- Information shown when you hover over the dropdown
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the dropdown while it's disabled

	Searchable = true, -- true / false, makes the dropdown searchable (great for a long list of values)

	Callback = function(Value)
        flowtype = Value
		print("flow type is now", flowtype)
	end,

	Disabled = false, -- Will disable the dropdown (true / false)
	Visible = true, -- Will make the dropdown invisible (true / false)
})

RightGroupbox2:AddSlider("buff", {
	Text = "Buff percentage",
	Default = 10,
	Min = 5,
	Max = 15,
	Rounding = 1,
	Compact = false,

	Callback = function(Value)
		buff = Value / 10 - .006
		print("buff is now:", Value)
	end,

	Tooltip = "I am a slider!", -- Information shown when you hover over the slider
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the slider while it's disabled

	Disabled = false, -- Will disable the slider (true / false)
	Visible = true, -- Will make the slider invisible (true / false)
})
RightGroupbox2:AddToggle("Flow buff Roll", {
	Text = "Auto roll flow",
	Tooltip = "Automatically rerolls until desired flow is found",

	Default = false,
	Callback = function(Value)
		if Value then
			task.spawn(function()
				while Toggles["Flow buff Roll"] and Toggles["Flow buff Roll"].Value do
					local shouldStop = false
					local shouldHop = false
					local shouldRoll = true

					local success, err = pcall(function()
						local character = player.Character
						if not character then return end

						local aura = character:FindFirstChild("AuraColour")
						if not aura then return end

						local buffObj = aura:FindFirstChild("Buff")
						if not buffObj then return end

						local currentType = buffObj.Value
						local buffPercent = (buffObj:GetAttribute("BuffValue") or 0)

						local selectedType = flowtype
						local minBuff = buff

						-- ✅ Already has correct flow and buff
						if currentType == selectedType and buffPercent >= minBuff then
							print("Player already has desired Flow and Buff. Stopping auto-roll.")
							shouldRoll = false
							shouldStop = true
							return
						end

						-- ❌ Not enough Yen
						if player.Character:FindFirstChild("RankSystem") and player.Character.RankSystem:FindFirstChild("Yen") then
							local currentYen = player.Character.RankSystem.Yen.Value
							if currentYen < tonumber(Options.minyen.Value) then
								print("Not enough Yen, rolling back + hopping")
								
								-- Rollback teleport
								local args = {
									[1] = "Right",
									[2] = "F\255"
								}
								game.ReplicatedStorage:WaitForChild("rerolls"):WaitForChild("KeybindChange"):FireServer(unpack(args))
								task.wait(0.2)

								shouldStop = true
								shouldHop = true
								return
							end
						end
					end)

					if not success then
						warn("Flow Auto Roll error:", err)
					end

					if shouldRoll then
						game.ReplicatedStorage.rerolls.buffreroll:FireServer()
					end

					if shouldHop then
						loadstring(game:HttpGet("https://raw.githubusercontent.com/comethubasd/comet/refs/heads/main/best%20server"))()
					end

					if shouldStop then break end
					task.wait(ping / 1000)
				end
			end)
		end
	end
})




local LeftGroupBox5 = Tabs.ingame:AddLeftGroupbox("Auto Flick")

local shootPower = 10.5
local shootAngle = 70

LeftGroupBox5:AddSlider("flick power", {
	Text = "flick power",
	Default = 10.5,
	Min = 10.5,
	Max = 12,
	Rounding = 1,
	Compact = false,

	Callback = function(Value)
		shootPower = Value
	end,

	Tooltip = "I am a slider!", -- Information shown when you hover over the slider
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the slider while it's disabled

	Disabled = false, -- Will disable the slider (true / false)
	Visible = true, -- Will make the slider invisible (true / false)
})

LeftGroupBox5:AddSlider("flick Angle", {
	Text = "flick Angle",
	Default = 70,
	Min = 40,
	Max = 80,
	Rounding = 1,
	Compact = false,

	Callback = function(Value)
		shootAngle = Value
	end,

	Tooltip = "I am a slider!", -- Information shown when you hover over the slider
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the slider while it's disabled

	Disabled = false, -- Will disable the slider (true / false)
	Visible = true, -- Will make the slider invisible (true / false)
})

local shootConnection -- Declared outside to persist

LeftGroupBox5:AddToggle("Auto flick", {
    Text = "Auto flick",
    Tooltip = "ts is form auto aim twin",
    DisabledTooltip = "This toggle is disabled",

    Default = false,
    Disabled = false,
    Visible = true,
    Risky = false,

    Callback = function(Value)
        local UserInputService = game:GetService("UserInputService")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")

        local function shoot()
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

            local forward = humanoidRootPart.CFrame.LookVector

            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://12830711336"

            local animator = humanoid:FindFirstChildOfClass("Animator")
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end

            local animationTrack = animator:LoadAnimation(animation)
            animationTrack:Play()

            local horizontalForward = Vector3.new(forward.X, 0, forward.Z)
            if horizontalForward.Magnitude == 0 then
                horizontalForward = Vector3.new(0, 0, 1)
            else
                horizontalForward = horizontalForward.Unit
            end

            local upward = Vector3.new(0, 1, 0)
            local elevationAngle = math.rad(shootAngle)
            local directionUnit = (horizontalForward * math.cos(elevationAngle) + upward * math.sin(elevationAngle)).Unit

            local direction = directionUnit * shootPower -- scale by shootPower

            local originalArgs = {
                shootPower, -- Replace the hardcoded value with shootPower here
                false,
                false,
                false,
                false,
                false,
                [9] = false,
                [10] = Color3.new(0.8017513155937195, 0.31795769929885864, 0.627495288848877),
                [11] = 13,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = false,
                [17] = false,
                [18] = false,
                [20] = false,
                [22] = 0.03169425638392567,
                [23] = false
            }

            local args = {vector.create(direction.X, direction.Y, direction.Z)}
            for i, v in pairs(originalArgs) do
                args[i + 1] = v
            end

            ReplicatedStorage:WaitForChild("shoot"):FireServer(unpack(args))
        end

        if Value then
            shootConnection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.C then
                    shoot()
                end
            end)
        else
            if shootConnection then
                shootConnection:Disconnect()
                shootConnection = nil
            end
        end
    end,
})

local autoAimConnection -- store keybind connection to manage later

LeftGroupBox5:AddToggle("form autoaim", {
    Text = "Form autoaim",
    Tooltip = "Automatically rerolls until desired weapon is found",
    DisabledTooltip = "This toggle is disabled",

    Default = false,
    Disabled = false,
    Visible = true,
    Risky = false,

    Callback = function(Value)
        if not Value then
            if autoAimConnection then
                autoAimConnection:Disconnect()
                autoAimConnection = nil
            end
            return
        end

        local player = game.Players.LocalPlayer
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local box1 = workspace.Box:WaitForChild("Box1")
        local box2 = workspace.Box:WaitForChild("Box2")
        local sensorGoals = workspace:WaitForChild("SensorGoals")
        local ball = workspace.BallFolder:WaitForChild("Ball")

        local function createCornerParts()
            local partsInfo = {
                {name = "R Top Left Corner", position = Vector3.new(-464.58, 7.93, -47.13)},
                {name = "R Top Right Corner", position = Vector3.new(-464.58, 7.93, -85.54)},
                {name = "L Top Left Corner", position = Vector3.new(270.83, 7.93, -85.92)},
                {name = "L Top Right Corner", position = Vector3.new(270.83, 7.93, -47.52)}
            }

            for _, info in ipairs(partsInfo) do
                if not workspace:FindFirstChild(info.name) then
                    local part = Instance.new("Part")
                    part.Name = info.name
                    part.Size = Vector3.new(1, 1, 1)
                    part.Position = info.position
                    part.Anchored = true
                    part.CanCollide = false
                    part.Transparency = 1
                    part.Parent = workspace
                end
            end
        end

        createCornerParts()

        local corners = {
            RTopLeft = workspace:FindFirstChild("R Top Left Corner"),
            RTopRight = workspace:FindFirstChild("R Top Right Corner"),
            LTopLeft = workspace:FindFirstChild("L Top Left Corner"),
            LTopRight = workspace:FindFirstChild("L Top Right Corner")
        }

        local function isInBox(box)
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local pos = hrp.Position
                local boxPos = box.Position
                local boxSize = box.Size
                return pos.X > boxPos.X - boxSize.X/2 and pos.X < boxPos.X + boxSize.X/2 and
                       pos.Y > boxPos.Y - boxSize.Y/2 and pos.Y < boxPos.Y + boxSize.Y/2 and
                       pos.Z > boxPos.Z - boxSize.Z/2 and pos.Z < boxPos.Z + boxSize.Z/2
            end
            return false
        end

        local function isPlayerOnLeftOrRight(box)
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then return "unknown" end
            return box.CFrame.RightVector:Dot((hrp.Position - box.Position).Unit) > 0 and "right" or "left"
        end

        local function hasStraightPathToTarget(box)
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            return hrp and math.abs(hrp.Position.Z - box.Position.Z) < 0.01
        end

        local function determineTarget(box)
            if hasStraightPathToTarget(box) then
                return box == box1 and sensorGoals:GetChildren()[2] or sensorGoals:FindFirstChild("SensorGoal")
            else
                local side = isPlayerOnLeftOrRight(box)
                if box == box1 then
                    return side == "left" and corners.RTopRight or corners.RTopLeft
                elseif box == box2 then
                    return side == "left" and corners.LTopLeft or corners.LTopRight
                end
            end
        end

        local function aimAtTargetOpposite(target)
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if hrp and target then
                local direction = (target.Position - hrp.Position).Unit
                hrp.CFrame = CFrame.new(hrp.Position, hrp.Position - direction)
            end
        end

        local function fireFormlessShot(target)
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if not hrp or not target then return end

            local aura = player.Character:FindFirstChild("AuraColour")
            local r = aura and aura:FindFirstChild("Red") and aura.Red.Value or 1
            local g = aura and aura:FindFirstChild("Green") and aura.Green.Value or 1
            local b = aura and aura:FindFirstChild("Blue") and aura.Blue.Value or 1

            local shotDirection = (target.Position - hrp.Position).Unit

            local args = {
                [1] = shotDirection * 1.25 - hrp.CFrame.UpVector / 25,
                [2] = -100,
                [3] = false,
                [4] = true,
                [5] = false,
                [6] = false,
                [7] = false,
                [9] = false,
                [10] = Color3.new(r, g, b),
                [11] = 40,
                [12] = false,
                [13] = false,
                [14] = false,
                [15] = false,
                [16] = true,
                [17] = false,
                [18] = false
            }

            ReplicatedStorage:WaitForChild("SpecEvents"):WaitForChild("Formless"):FireServer(unpack(args))
        end

        local function playFormlessAnimation()
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end

            if humanoid.RigType ~= Enum.HumanoidRigType.R6 then
                warn("Formless animation requires R6 rig")
                return
            end

            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://13857940523"
            local track = humanoid:LoadAnimation(animation)
            track:Play()
            track:AdjustSpeed(1)
        end

        local function runAutoAimFormless()
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then return end

            local closestBox = (hrp.Position - box1.Position).Magnitude < (hrp.Position - box2.Position).Magnitude and box1 or box2
            local target = determineTarget(closestBox)
            if target then
                aimAtTargetOpposite(target)
                fireFormlessShot(target)
                playFormlessAnimation()
            end
        end

        autoAimConnection = game:GetService("UserInputService").InputBegan:Connect(function(input, gpe)
            if not gpe and input.KeyCode == Enum.KeyCode.R then
                runAutoAimFormless()
            end
        end)
    end,
})




-- UI Settings
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" },
	Default = "Right",

	Text = "Notification Side",

	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",

	Text = "DPI Scale",

	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)

		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place") -- if the game has multiple places inside of it (for example: DOORS)
-- you can use this to save configs for those places separately
-- The path in this script would be: MyScriptHub/specific-game/settings/specific-place
-- [ This is optional ]

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs["UI Settings"])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs["UI Settings"])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
