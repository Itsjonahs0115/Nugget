-- starting gui
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Ping Detection
-- Ping Detection using ServerStatsItem
local Stats = game:GetService("Stats")
local ping = 0

task.spawn(function()
    local pingStat = Stats.Network.ServerStatsItem and Stats.Network.ServerStatsItem:FindFirstChild("Data Ping")
    while true do
        if pingStat then
            ping = math.floor(pingStat:GetValue())
        else
            ping = 0
        end
        task.wait(0.1)
    end
end)

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false -- Forces AddToggle to AddCheckbox
Library.ShowToggleFrameInKeybinds = true -- Make toggle keybinds work inside the keybinds UI (aka adds a toggle to the UI). Good for mobile users (Default value = true)

local Window = Library:CreateWindow({
	-- Set Center to true if you want the menu to appear in the center
	-- Set AutoShow to true if you want the menu to appear when it is created
	-- Set Resizable to true if you want to have in-game resizable Window
	-- Set MobileButtonsSide to "Left" or "Right" if you want the ui toggle & lock buttons to be on the left or right side of the window
	-- Set ShowCustomCursor to false if you don't want to use the Linoria cursor
	-- NotifySide = Changes the side of the notifications (Left, Right) (Default value = Left)
	-- Position and Size are also valid options here
	-- but you do not need to define them unless you are changing them :)

	Title = "Comet Hub",
	Footer = "version: Rollback hub",
	Icon = 89767261484585,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local Tabs = {
	-- Creates a new tab titled Main
	Main = Window:AddTab("Main", "user"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox("Misc")

local Rollback = LeftGroupBox:AddButton({
	Text = "Rollback",
	Func = function()
		local player = game.Players.LocalPlayer
	local yen = player.Character.RankSystem.Yen
	local args = {
		[1] = "Right",
		[2] = "F\255"
	}
	game:GetService("ReplicatedStorage"):WaitForChild("rerolls"):WaitForChild("KeybindChange"):FireServer(unpack(args))
	task.wait(0.2)

	local TeleportService = game:GetService("TeleportService")
	local HttpService = game:GetService("HttpService")
	local PlaceID = game.PlaceId

	local success, servers = pcall(function()
		return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))
	end)

	if success and servers and servers.data then
		for _, server in ipairs(servers.data) do
			if server.id ~= game.JobId and server.playing < server.maxPlayers then
				local latency = server.ping or server.RequestQueueSize
				if latency and latency < 100 then
					TeleportService:TeleportToPlaceInstance(PlaceID, server.id, player)
					break
				end
			end
		end
	end
	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local Dupe = LeftGroupBox:AddButton({
	Text = "Dupe second slot",
	Func = function()
		local plr = game.Players.LocalPlayer
	plr.Character.Humanoid.Health = 0

	task.wait(10)

	game.ReplicatedStorage.rerolls.Slots:FireServer("1")

	task.wait(2)

	local TeleportService = game:GetService("TeleportService")
	local HttpService = game:GetService("HttpService")
	local PlaceID = game.PlaceId

	local success, servers = pcall(function()
		return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))
	end)

	if success and servers and servers.data then
		for _, server in ipairs(servers.data) do
			if server.id ~= game.JobId and server.playing < server.maxPlayers then
				local latency = server.ping or server.RequestQueueSize
				if latency and latency < 100 then
					TeleportService:TeleportToPlaceInstance(PlaceID, server.id, plr)
					break
				end
			end
		end
	end
	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local Redeem = LeftGroupBox:AddButton({
	Text = "Redeem codes",
	Func = function()
		local code = game.ReplicatedStorage.SendCode
    code:FireServer("120KFAVOURITE")
    code:FireServer("125MILVISITS")
    code:FireServer("DRAGONHEADER")
    code:FireServer("150KMEMBERS")
    code:FireServer("70KLIKES")
    code:FireServer("MEDALXLOCKED")
    code:FireServer("10KSUBS")
    code:FireServer("SEASON5WINNER")
    code:FireServer("CODE")
	end,
	DoubleClick = false,

	Tooltip = "This is the main button",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local RightGroupbox = Tabs.Main:AddRightGroupbox("Auto Roll")

local getWeaponSelection = "na"
local getTraitSelection = "na"


RightGroupbox:AddDropdown("Weapon", {
	Values = { "Accelerate", "Acrobatic", "AceEater", "Chigiri", "CopyCat", "DirectShot", "Emperor", "Formless",
    "GodSpeed", "IronHead", "King", "Kunigami", "Leader", "LongLegs", "Monster", "Nagi", "Neurotic",
    "Planetary", "Repel", "Riptide", "Rough", "Serpent", "Shadow", "Snatch", "SwordScrew", "Updraft",
    "Voracious", "WatchTower", "Web" },
	Default = 0, -- number index of the value / string
	Multi = false, -- true / false, allows multiple choices to be selected

	Text = "Search Weapon",
	Tooltip = "This is a tooltip", -- Information shown when you hover over the dropdown
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the dropdown while it's disabled

	Searchable = true, -- true / false, makes the dropdown searchable (great for a long list of values)

	Callback = function(Value)
        getWeaponSelection = Value
		print("Weapon got changed. New value:", getWeaponSelection)
	end,

	Disabled = false, -- Will disable the dropdown (true / false)
	Visible = true, -- Will make the dropdown invisible (true / false)
})


RightGroupbox:AddDropdown("trait", {
	Values = { "Ambidextrous", "Athlete", "Bunnys", "Clamps", "Claw", "Diver", "Egoist", "Fortune", "GoldenZone",
    "LongStrides", "Metavision", "NoLook", "Powerhouse", "Puppeteer", "QuickDraw", "Revolver", "Ripper",
    "Surf", "Tank", "Tireless", "TwinGuns", "Unbreakable" },
	Default = 0, -- number index of the value / string
	Multi = false, -- true / false, allows multiple choices to be selected

	Text = "Search trait",
	Tooltip = "This is a tooltip", -- Information shown when you hover over the dropdown
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the dropdown while it's disabled

	Searchable = true, -- true / false, makes the dropdown searchable (great for a long list of values)

	Callback = function(Value)
        getTraitSelection = Value
		print("Trait got changed. New value:", getTraitSelection)
	end,

	Disabled = false, -- Will disable the dropdown (true / false)
	Visible = true, -- Will make the dropdown invisible (true / false)
})



RightGroupbox:AddToggle("weapon roll", {
	Text = "Auto roll weapon",
	Tooltip = "Automatically rerolls until desired weapon is found",
	DisabledTooltip = "This toggle is disabled",

	Default = false,
	Disabled = false,
	Visible = true,
	Risky = false,

	Callback = function(Value)
	if Value then
		task.spawn(function()
			while Toggles["weapon roll"].Value do
				local weapontofind = getWeaponSelection
				if not weapontofind or weapontofind == "na" then break end

				local foundWeapon = player.Backpack:FindFirstChildWhichIsA("ValueBase")
				local hasWeapon = foundWeapon and foundWeapon.Name == weapontofind

				if hasWeapon then 
				print("weapon found")
				local TeleportService = game:GetService("TeleportService")
					local HttpService = game:GetService("HttpService")
					local PlaceID = game.PlaceId

					local success, servers = pcall(function()
						return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))
					end)

					if success and servers and servers.data then
						for _, server in ipairs(servers.data) do
							if server.id ~= game.JobId and server.playing < server.maxPlayers then
								local latency = server.ping or server.RequestQueueSize
								if latency and latency < 100 then
									TeleportService:TeleportToPlaceInstance(PlaceID, server.id, player)
									break
								end
							end
						end
					end
				break
				end

				if player.Character.RankSystem.Yen.Value < tonumber(Options.minyen.Value) then
					-- Run rollback teleport
					local args = {
						[1] = "Right",
						[2] = "F\255"
					}
					ReplicatedStorage:WaitForChild("rerolls"):WaitForChild("KeybindChange"):FireServer(unpack(args))
					task.wait(0.2)

					local TeleportService = game:GetService("TeleportService")
					local HttpService = game:GetService("HttpService")
					local PlaceID = game.PlaceId

					local success, servers = pcall(function()
						return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))
					end)

					if success and servers and servers.data then
						for _, server in ipairs(servers.data) do
							if server.id ~= game.JobId and server.playing < server.maxPlayers then
								local latency = server.ping or server.RequestQueueSize
								if latency and latency < 100 then
									TeleportService:TeleportToPlaceInstance(PlaceID, server.id, player)
									break
								end
							end
						end
					end
					break
				end

				ReplicatedStorage.rerolls.specreroll:FireServer(2)
				task.wait(ping / 1000)
			end
		end)
	end
end,
})

RightGroupbox:AddToggle("trait roll", {
	Text = "Auto roll Trait",
	Tooltip = "This is a tooltip",
	DisabledTooltip = "I am disabled!",
	Default = false,
	Disabled = false,
	Visible = true,
	Risky = false,

	Callback = function(Value)
	if Value then
		task.spawn(function()
			local traittofind = getTraitSelection
			if not traittofind or traittofind == "na" then return end

			while Toggles["trait roll"].Value do
				local traitFolder = player.Backpack:FindFirstChild("Trait")
				local foundTrait = traitFolder and traitFolder:FindFirstChildWhichIsA("ValueBase")
				local hasTrait = foundTrait and foundTrait.Name == traittofind

				if hasTrait then 
				print("Trait found")
				local TeleportService = game:GetService("TeleportService")
					local HttpService = game:GetService("HttpService")
					local PlaceID = game.PlaceId

					local success, servers = pcall(function()
						return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))
					end)

					if success and servers and servers.data then
						for _, server in ipairs(servers.data) do
							if server.id ~= game.JobId and server.playing < server.maxPlayers then
								local latency = server.ping or server.RequestQueueSize
								if latency and latency < 100 then
									TeleportService:TeleportToPlaceInstance(PlaceID, server.id, player)
									break
								end
							end
						end
					end
				break
				end

				if player.Character.RankSystem.Yen.Value < tonumber(Options.minyen.Value) then
					-- Run rollback teleport
					local args = {
						[1] = "Right",
						[2] = "F\255"
					}
					ReplicatedStorage:WaitForChild("rerolls"):WaitForChild("KeybindChange"):FireServer(unpack(args))
					task.wait(0.2)

					local TeleportService = game:GetService("TeleportService")
					local HttpService = game:GetService("HttpService")
					local PlaceID = game.PlaceId

					local success, servers = pcall(function()
						return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))
					end)

					if success and servers and servers.data then
						for _, server in ipairs(servers.data) do
							if server.id ~= game.JobId and server.playing < server.maxPlayers then
								local latency = server.ping or server.RequestQueueSize
								if latency and latency < 100 then
									TeleportService:TeleportToPlaceInstance(PlaceID, server.id, player)
									break
								end
							end
						end
					end
					break
				end

				ReplicatedStorage.rerolls.traitreroll:FireServer(2)
				task.wait(ping / 1000)
			end
		end)
	end
end,
})

local minimYen = 3000

RightGroupbox:AddInput("minyen", {
	Default = 3000,
	Numeric = true, -- true / false, only allows numbers
	Finished = false, -- true / false, only calls callback when you press enter
	ClearTextOnFocus = true, -- true / false, if false the text will not clear when textbox focused

	Text = "Minimum yen",
	Tooltip = "This is a tooltip", -- Information shown when you hover over the textbox

	Placeholder = "...", -- placeholder text when the box is empty
	-- MaxLength is also an option which is the max length of the text

	Callback = function(Value)
		minimYen = Value
	end,
})



local LeftGroupbox2 = Tabs.Main:AddLeftGroupbox("Current stuff")
local yen = player.Character.RankSystem.Yen

pingLabel = LeftGroupbox2:AddLabel("Current Ping: ...")
LeftGroupbox2:AddLabel("note the lower your")
LeftGroupbox2:AddLabel("ping the faster you spin")
weaponLabel = LeftGroupbox2:AddLabel("Current Weapon: ...")
traitLabel = LeftGroupbox2:AddLabel("Current Trait: ...")
yenLabel = LeftGroupbox2:AddLabel("Yen: ...")


-- Update Labels Loop
task.spawn(function()
    while true do
        -- Update Ping
        pingLabel:SetText("Current Ping: " .. ping .. "ms")
        
        -- Update Ability
        local currentAbility = "N/A"
        for _, val in ipairs(player.Backpack:GetChildren()) do
            if val:IsA("NumberValue") then
                currentAbility = val.Name
                break
            end
        end
        weaponLabel:SetText("Current Weapon: " .. currentAbility)

        -- Update Trait
        local currentTrait = "N/A"
        local traitFolder = player.Backpack:FindFirstChild("Trait")
        if traitFolder then
            for _, trait in ipairs(traitFolder:GetChildren()) do
                if trait:IsA("ValueBase") then
                    currentTrait = trait.Name
                    break
                end
            end
        end
        traitLabel:SetText("Current Trait: " .. currentTrait)

		yen = player.Character.RankSystem.Yen.value
		yenLabel:SetText("Yen: " .. yen)

        task.wait(0.02)
    end
end)















-- UI Settings
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" },
	Default = "Right",

	Text = "Notification Side",

	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",

	Text = "DPI Scale",

	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)

		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place") -- if the game has multiple places inside of it (for example: DOORS)
-- you can use this to save configs for those places separately
-- The path in this script would be: MyScriptHub/specific-game/settings/specific-place
-- [ This is optional ]

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs["UI Settings"])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs["UI Settings"])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
